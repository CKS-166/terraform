# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool: default

parameters:
  - name: environment
    values:
      - dev
      - prod
variables:
  - group: tf_vg_${{parameter.environment}}
stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'azure-serv-principal-sc'
              backendAzureRmResourceGroupName: '$(be_storage_rg)'
              backendAzureRmStorageAccountName: '$(be_storage_acc)'
              backendAzureRmContainerName: '$(be_container)'
              backendAzureRmKey: '$(be_storage_key)'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'azure-serv-principal-sc'
              backendAzureRmResourceGroupName: '$(be_storage_rg)'
              backendAzureRmStorageAccountName: '$(be_storage_acc)'
              backendAzureRmContainerName: '$(be_container)'
              backendAzureRmKey: '$(be_storage_key)'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: --var-file=$(env_var_path)
              environmentServiceNameAzureRM: 'azure-serv-principal-sc'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: --var-file=$(env_var_path)
              environmentServiceNameAzureRM: 'azure-serv-principal-sc'
